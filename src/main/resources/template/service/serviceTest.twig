package {{ serviceTestField.packagePath }};

import {{ repoField.packagePath }}.{{ repoField.className }};
import {{ modelField.packagePath }}.{{ modelField.className }};

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Matchers.same;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.initMocks;

public class {{ serviceTestField.className }} {

    @Mock
    private {{ repoField.className }} {{ repoField.varName }};

    @InjectMocks
    private {{ serviceField.className }} classUnderTest;

    @Before
    public void setUp() throws Exception {
        initMocks(this);
    }

    @Test
    public void testCreate() {
        {{ modelField.className }} instance = new {{ modelField.className }}();
        when(this.{{ repoField.varName }}.save(same(instance))).thenReturn(instance);

        assertThat(instance, sameInstance(this.classUnderTest.create(instance)));
    }

    @Test
    public void testRead() {

    }

    @Test
    public void testUpdate() {

    }

    @Test
    public void testDelete() {

    }

}