package {{ controllerITField.packagePath }};

import {{ docField.packagePath }}.{{ docField.className }};
import {{ modelField.packagePath }}.{{ modelField.className }};

import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
public class {{ controllerITField.className }} extends {{ docField.className }} {

    private ObjectMapper objectMapper = new ObjectMapper();

    @Before
    public void setUp() {
        super.setUp();
    }

    @Test
    public void testCreate() throws Exception {
        {{ modelField.className }} instance = new {{ modelField.className }}();
        {{ idField.className }} id = instance.get{% filter capitalize %}{{ idField.varName }}{% endfilter %}();

        String payload = this.objectMapper.writeValueAsString(instance);
        String response = this.mockMvc.perform(
                post("/{{ baseRoute }}")
                    .content(payload)
                    .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isCreated())
                .andReturn().getResponse().getContentAsString();

        {{ modelField.className }} createInstance = this.objectMapper.readValue(response, {{ modelField.className }}.class);

        assertThat(id, not(createInstance.get{% filter capitalize %}{{ idField.varName }}{% endfilter %}()));
    }

}